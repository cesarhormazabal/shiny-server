shiny::runApp()
library(readr)
Data_Ejemplo_Camiones <- read_delim("Data_Ejemplo_Camiones.csv",
";", escape_double = FALSE, trim_ws = TRUE)
View(Data_Ejemplo_Camiones)
runApp()
runApp()
runApp()
runApp()
runApp()
?selectizeInput
runApp()
runApp()
unique(Data_Ejemplo_Camiones$Camion)
Data_Ejemplo_Camiones[which(Data_Ejemplo_Camiones$Camion %in% c("RH11234"))]
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
unique(Data_Ejemplo_Camiones$Camion)
Data_Ejemplo_Camiones[which(Data_Ejemplo_Camiones$Camion %in% c("RH11234","RH11235"))]
Data_Ejemplo_Camiones$Camion
Data_Ejemplo_Camiones$Camion %in% c("RH11234","RH11235")
which(Data_Ejemplo_Camiones$Camion %in% c("RH11234","RH11235"))
Data_Ejemplo_Camiones[which(Data_Ejemplo_Camiones$Camion %in% c("RH11234","RH11235"))]
Data_Ejemplo_Camiones[which(Data_Ejemplo_Camiones$Camion %in% c("RH11234","RH11235")),]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?rnorm
runApp()
runApp()
runApp()
library(dplyr)
ex<-Data_Ejemplo_Camiones$Camion
colnames(ex)
names(ex)
evenbins <- function(x, bin.count=10, order=T) {
bin.size <- rep(length(x) %/% bin.count, bin.count)
bin.size <- bin.size + ifelse(1:bin.count <= length(x) %% bin.count, 1, 0)
bin <- rep(1:bin.count, bin.size)
if(order) {
bin <- bin[rank(x,ties.method="random")]
}
return(factor(bin, levels=1:bin.count, ordered=order))
}
evenbins(ex,10)
table(evenbins(ex,10))
runApp()
runApp()
?cut
Data_Ejemplo_Camiones %>%
mutate(carga_cat = cut(Carga, breaks = seq(80, 10, 150))) %>%
group_by(carga_cat) %>%
summarise(conteo = n())
Data_Ejemplo_Camiones %>%
mutate(carga_cat = cut(Carga, breaks = seq(80, 10, 150)))
cut(Data_Ejemplo_Camiones$Carga, breaks = seq(80, 10, 150))
seq(80, 10, 150)
?seq
cut(Data_Ejemplo_Camiones$Carga, breaks = seq(80, 150, 10))
Data_Ejemplo_Camiones %>%
mutate(carga_cat = cut(Carga, breaks = seq(80, 150, 10))) %>%
group_by(carga_cat) %>%
summarise(conteo = n())
data_hist <- Data_Ejemplo_Camiones %>%
mutate(carga_cat = cut(Carga, breaks = seq(70, 180, 10))) %>%
group_by(carga_cat) %>%
summarise(conteo = n())
Data_Ejemplo_Camiones %>%
mutate(carga_cat = cut(Carga, breaks = seq(70, 180, 10))) %>%
group_by(carga_cat) %>%
summarise(conteo = n())
data_hist <- Data_Ejemplo_Camiones %>%
mutate(carga_cat = cut(Carga, breaks = seq(20, 200, 10))) %>%
group_by(carga_cat) %>%
summarise(conteo = n())
Data_Ejemplo_Camiones %>%
mutate(carga_cat = cut(Carga, breaks = seq(20, 200, 10))) %>%
group_by(carga_cat) %>%
summarise(conteo = n())
runApp()
data_hist <- Data_Ejemplo_Camiones %>%
mutate(carga_cat = cut(Carga, breaks = seq(20, 200, 10))) %>%
group_by(carga_cat) %>%
summarise(conteo = n())
hchart(data_hist, "column", x = carga_cat, y = conteo)
hchart(data_hist, "column", hcaes(x = carga_cat, y = conteo))
runApp()
runApp()
runApp()
runApp()
?hc_yAxis_multiples
runApp()
highchart() %>%
hc_yAxis_multiples(
list(top = "0%", height = "30%", lineWidth = 3),
list(top = "30%", height = "70%", offset = 0,
showFirstLabel = FALSE, showLastLabel = FALSE)
) %>%
hc_add_series(data = rnorm(10)) %>%
hc_add_series(data = rexp(10), type = "spline", yAxis = 1)
highchart() %>%
hc_yAxis_multiples(
list(top = "0%", height = "30%", lineWidth = 3),
list(top = "30%", height = "70%", offset = 0,
showFirstLabel = FALSE, showLastLabel = FALSE)
) %>%
hc_add_series(data = rnorm(10)) %>%
hc_add_series(data = rexp(10), type = "spline", yAxis = 2)
highchart() %>%
hc_yAxis_multiples(
list(top = "0%", height = "30%", lineWidth = 3),
list(top = "30%", height = "70%", offset = 0,
showFirstLabel = FALSE, showLastLabel = FALSE)
) %>%
hc_add_series(data = rnorm(10)) %>%
hc_add_series(data = rexp(10), type = "spline", yAxis = 2)
highchart() %>%
hc_yAxis_multiples(
list(top = "0%", height = "30%", lineWidth = 3),
list(top = "30%", height = "70%", offset = 0,
showFirstLabel = FALSE, showLastLabel = FALSE)
) %>%
hc_add_series(data = rnorm(10)) %>%
hc_add_series(data = rexp(10), type = "spline", yAxis = 1)
runApp()
?create_yaxis
runApp()
?hc_yAxis_multiples
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages("zoo")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("VGAM")
install.packages("quantmod")
shiny::runApp('~/GitHub/shiny-server/example_finances')
runApp('~/GitHub/shiny-server/example_simulation')
headerPanel
material_page
runApp()
runApp()
runApp()
runApp()
runApp('~/GitHub/shiny-server/example_finances')
runApp('~/GitHub/shiny-server/example_finances')
